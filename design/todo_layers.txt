- Get tests green again
- Deprecate up.replace(). It takes a selector, and that is now mostly optional.
- Deprecate up.extract(). It takes a selector, and that is now mostly optional.
- up.reload()
  - should work without a target
- Test that clicking on the layer backdrop will cause dismiss on iOS (https://code.makandra.de/makandra/studyflix/commit/cf7d016a1d00797519b709cfcb27423c6adea9d2)
- Test that [up-dismiss][up-follow] inside a layer will dismiss
- Test that [up-dismiss][up-follow] outside a layer will follow
- What is up.browser.navigate() ?
- Is { navigate } is really the best name for the option? Maybe { solo } or similar?
  - We could also use it for A11Y things
- Go through all public API of up.fragment and check if it still makes sense or if it only works for current layer.
- Document changes in options { history } (now boolean) and { location } (now a string) changes
- Deprecate all up.modal/popup functions and delegate to layer as good as possible
- Test layer { context } transmission
- Deprecate the entire up.history API
  - add to CHANGELOG
  - Deprecate API symbols
- TODO: Test that up.change() can be called with { target: Element }
- TODO: Test that up.change() can be called with { target: Element } and will find in any layer
- TODO: Test that up.change() without { layer } option will only find in current layer
- Documentation
- Separate { query } and [up-query] options
- Check if more API should be moved to getter-style
- Should there be dismiss-Handlers?
- Do new new-Layer-Requests cancel all new-Layer-Requests that are still in flight?
  => We cancel all that { navigate }
- Docs: up:form:submit event now has { options } to manipulate
- Docs: up:link:follow event now has { options } to manipulate
- Decide whether to keep LayerStack as separate class (or should it just be up.layer)
- Can we offer some way for custom layer flavors?
- Test that back button closes all layers
- Check new layer styles visually
- Consider moving up.Layer.Overlay#closeVariant to up.Change.Plan.DismissLayer/up.Change.Plan.AcceptLayer
- Should [up-href] be [up-url] to match { url }?

Finishing up
------------

- Remove unused files after we copied all documentation
  - popup
  - modal
- Grep for TODO
- Test in all browsers
- Migrate cards
- Fix up-guide
  - Simplify content-link, modal-link, drawer-link
  - up_modal.sass


Accessibility
--------------

- A11Y: current layer should get [role=dialog] and [aria-modal=true], all parent layers should get [inert] and [aria-hidden: true]. Since the root layer has no containers, we should apply this to direct children
- A11Y: check if [inert] etc. are enough to have the browser rotate focus within the layer
- A11Y: opening a layer should focus the layer, optionally to [autofocus]
- A11Y: closing a layer should focus the element that opened the layer


Bootstrap integration
---------------------

- update or stop supporting unpoly-boostrap3
- should we have unpoly-bootstrap4?


Later?
------

- Do we want an ExtractPlan.BackButton? Turbolinks keep [up-keep] for back.
- Turn property-like API symbols into getter
  - e.g. up.layer.root instead of up.layer.root()
  - e.g. up.layer.current instead of up.layer.current()
- Support [up-target][up-class] and [up-target][up-fail-class] to set a class on the new fragment
  - But think how that would go together with [up-layer="new"][up-class="warning"]
- Support :destroy pseudo-class up up.change() target
- Do we need an API to change context from JS? from server via header?
- Make all module names uppercase.
  - In a ES6 world this would not even be so bad, or even necessary. import { Event } from 'up'. Event.emit(...).
  - Even consider dropping shortcuts so we always do up.Fragment.change(), up.Event.emit(...)
- Should up.reload / up.change etc. resolve to the updated elements?

