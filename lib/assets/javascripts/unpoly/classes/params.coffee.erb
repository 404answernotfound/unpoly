u = up.util
e = up.element

###**
Request parameters
==================

Methods like [`up.replace()`](/up.replace) accept request parameters (or form data values) as a `{ params }` option.

This module offers a consistent API to read and manipulate request parameters independent of their type.


\#\#\# Supported parameter types

The following types of parameters are supported:

1. an object like `{ email: 'foo@bar.com' }`
2. a [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object
3. a query string like `email=foo%40bar.com`
4. an array of `{ name, value }` objects like `[{ name: 'email', value: 'foo@bar.com' }]`

@class up.params
###
class up.Params

  ###**
  TODO: Document me
  ###
  constructor: (raw) ->
    @clear()
    @addAll(raw)

  ###**
  TODO: Document me
  ###
  clear: ->
    @entries = []

  ###**
  TODO: Document me
  ###
  copy: ->
    new up.Params(@)

  ###**
  Returns an object representation of the given `params`.

  The given params value may be of any [supported type](/up.params).

  The returned value is a simple JavaScript object whose properties correspond
  to the key/values in the given `params`.

  \#\#\# Example

      var object = up.params.toObject('foo=bar&baz=bam')

      // object is now: {
      //   foo: 'bar',
      //   baz: 'bam'
      // ]

  @function up.params.toObject
  @param {Object|FormData|string|Array|undefined} params
    the params to convert
  @return {Array}
    an object representation of the given params
  @experimental
  ###
  toObject: ->
    obj = {}
    for entry in @entries
      { name, value } = entry
      unless u.isBasicObjectProperty(name)
        if @isArrayKey(name)
          obj[name] ||= []
          obj[name].push(value)
        else
          obj[name] = value
    obj

  ###**
  TODO: Document me
  ###
  toArray: ->
    @entries

  ###**
  Returns [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) representation of the given `params`.

  The given params value may be of any [supported type](/up.params).

  \#\#\# Example

      var formData = up.params.toFormData('foo=bar&baz=bam')

      formData.get('foo') // 'bar'
      formData.get('baz') // 'bam'

  @function up.params.toFormData
  @param {Object|FormData|string|Array|undefined} params
    the params to convert
  @return {FormData}
    a [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) representation of the given params
  @experimental
  ###
  toFormData: ->
    formData = new FormData()
    for entry in @entries
      formData.append(entry.name, entry.value)
    <% if ENV['JS_KNIFE'] %>formData.originalArray = @entries<% end %>
    formData

  ###**
  Returns an query string for the given `params`.

  The given params value may be of any [supported type](/up.params).

  The keys and values in the returned query string will be [percent-encoded](https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding).
  Non-primitive values (like [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File) will be omitted from
  the retuned query string.

  \#\#\# Example

      var query = up.params.toQuery({ foo: 'bar', baz: 'bam' })

      // query is now: 'foo=bar&baz=bam'

  @function up.params.toQuery
  @param {Object|FormData|string|Array|undefined} params
    the params to convert
  @return {string}
    a query string built from the given params
  @experimental
  ###
  toQuery: ->
    parts = u.map(@entries, @arrayEntryToQuery)
    parts = u.compact(parts)
    parts.join('&')

  arrayEntryToQuery: (entry) =>
    value = entry.value
    return undefined unless @isPrimitiveValue(value)
    query = encodeURIComponent(entry.name)
    # There is a subtle difference when encoding blank values:
    # 1. An undefined or null value is encoded to `key` with no equals sign
    # 2. An empty string value is encoded to `key=` with an equals sign but no value
    if u.isGiven(value)
      query += "="
      query += encodeURIComponent(value)
    query

  ###**
  Returns whether the given value can be encoded into a query string.

  We will have `File` values in our params when we serialize a form with a file input.
  These entries will be filtered out when converting to a query string.
  ###
  isPrimitiveValue: (value) ->
    u.isMissing(value) || u.isString(value) || u.isNumber(value) || u.isBoolean(value)

  ###**
  TODO: Document me for experimental API
  ###
  toURL: (base) ->
    parts = [base, @toQuery()]
    parts = u.select(parts, u.isPresent)
    separator = if u.contains(base, '?') then '&' else '?'
    parts.join(separator)

  ###**
  Adds to the given `params` a new  entry with the given `name` and `value`.

  The given params value may be of any [supported type](/up.params).

  The given `params` value is changed in-place, if possible. Some types, such as query strings,
  cannot be changed in-place. The return value is always a params value that includes the new entry.

  \#\#\# Example

      var obj = { foo: 'bar' }
      up.params.add(obj, 'baz', 'bam')
      // obj is now: { foo: 'bar', baz: 'bam' }

  @function up.params.add
  @param {string|object|FormData|Array|undefined} params
  @param {string} name
  @param {any} value
  @return {string|object|FormData|Array}
  @experimental
  ###
  add: (name, value) ->
    @entries.push({name, value})

  ###**
  TODO: Document me
  ###
  addAll: (raw) ->
    if u.isMissing(raw)
      # no-op
    else if raw instanceof @constructor
      @entries.push(raw.entries...)
    else if u.isArray(raw)
      # internal use for copying
      @entries.push(raw...)
    else if u.isString(raw)
      @addAllFromQuery(raw)
    else if u.isFormData(raw)
      @addAllFromFormData(raw)
    else if u.isObject(raw)
      @addAllFromObject(raw)
    else
      up.fail("Unsupport params type: %o", raw)

  addAllFromObject: (object) ->
    for key, value of object
      valueElements = if u.isArray(value) then value else [value]
      for valueElement in valueElements
        @add(key, valueElement)

  addAllFromQuery: (query) ->
    for part in query.split('&')
      if part
        [name, value] = part.split('=')
        name = decodeURIComponent(name)
        # There are three forms we need to handle:
        # (1) foo=bar should become { name: 'foo', bar: 'bar' }
        # (2) foo=    should become { name: 'foo', bar: '' }
        # (3) foo     should become { name: 'foo', bar: null }
        if u.isGiven(value)
          value = decodeURIComponent(value)
        else
          value = null
        @add(name, value)

  addAllFromFormData: (formData) ->
    u.eachIterator formData.entries(), (value) =>
      @add(value...)

  ###**
  TODO: Document me
  ###
  set: (name, value) ->
    @delete(name)
    @add(name, value)

  ###**
  TODO: Document me
  ###
  delete: (name) ->
    @entries = u.reject(@entries, @matchEntryFn(name))

  matchEntryFn: (name) ->
    (entry) -> entry.name == name

  ###**
  Returns the first param value with the given `name` from the given `params`.

  The given params value may be of any [supported type](/up.params).

  \#\#\# Example

      var array = [
        { name: 'foo', value: 'bar' },
        { name: 'baz', value: 'bam' }
      }

      value = up.params.get(array, 'baz')
      // value is now: 'bam'

  @function up.params.get
  @experimental
  ###
  get: (name) ->
    if @isArrayKey(name)
      @getAll(name)
    else
      @getFirst(name)

  ###**
  TODO: Document me
  ###
  getFirst: (name) ->
    entry = u.detect(@entries, @matchEntryFn(name))
    entry?.value

  ###**
  TODO: Document me
  ###
  getAll: (name) ->
    if @isArrayKey(name)
      @getAll(name)
    else
      entries = u.map(@entries, @matchEntryFn(name))
      u.map(entries, 'value')

  isArrayKey: (key) ->
    u.endsWith(key, '[]')

  ###**
  TODO: Document me
  ###
  isBlank: ->
    @entries.length == 0

  ###**
  Serializes request params from the given `<form>`.

  The returned params may be passed as `{ params }` option to
  [`up.request()`](/up.request) or [`up.replace()`](/up.replace).

  The serialized params will include the form's submit button, if that
  button as a `name` attribute.

  \#\#\#\# Example

  Given this HTML form:

      <form>
        <input type="text" name="name" value="Foo Bar">
        <input type="text" name="email" value="foo@bar.com">
      </form>

  This would serialize the form into an array representation:

      var params = up.params.fromForm('input[name=email]')

      // params is now: [
      //   { name: 'name', value: 'Foo Bar' },
      //   { name: 'email', value: 'foo@bar.com' }
      // ]

  @function up.params.fromForm
  @param {Element|jQuery|string} form
  @return {Array}
  @experimental
  ###
  @fromForm: (form) ->
    if form = e.get(form)
      fields = up.form.submissionFields(form)
      @fromFields(fields)

  ###**
  Serializes request params from a one or more [input fields](/up.form.config#config.fields).
  To serialize an entire form, use [`up.params.fromForm()`](/up.params.fromForm).

  Note that some fields may produce multiple params, such as `<select multiple>`.

  \#\#\#\# Example

  Given this HTML form:

      <form>
        <input type="text" name="email" value="foo@bar.com">
        <input type="password" name="password">
      </form>

  This would retrieve request parameters from the `email` field:

      var params = up.params.fromField('input[name=email]')

      // params is now: [{ name: 'email', value: 'foo@bar.com' }]

  @function up.params.fromField
  @param {Element|List<Element>|jQuery} fields
  @return {up.Params}
  @experimental
  ###
  @fromFields: (fields) ->
    params = new @()
    for field in u.wrapList(fields)
      params.addField(field)
    params

  ###**
  TODO: Document me
  ###
  addField: (field) ->
    params = new @constructor()
    if (field = e.get(field)) && (name = field.name) && (!field.disabled)
      tagName = field.tagName
      type = field.type
      if tagName == 'SELECT'
        for option in field.querySelectorAll('option')
          if option.selected
            @add(name, option.value)
      else if type == 'checkbox' || type == 'radio'
        if field.checked
          @add(name, field.value)
      else if type == 'file'
        # The value of an input[type=file] is the local path displayed in the form.
        # The actual File objects are in the #files property.
        for file in field.files
          @add(name, file)
      else
        @add(name, field.value)

  ###**
  TODO: Document me
  ###
  isEqual: (other) ->
    other && (@constructor == other.constructor) && u.isEqual(@entries, other.entries)

  ###**
  Returns the [query string](https://en.wikipedia.org/wiki/Query_string) from the given URL.

  The query string is returned **without** a leading question mark (`?`).
  Returns `undefined` if the given URL has no query component.

  You can access individual values from the returned query string using functions like
  [`up.params.get()`](/up.params.get) or [`up.params.toObject()`](/up.params.toObject).

  \#\#\# Example

      var query = up.params.fromURL('http://foo.com?bar=baz')

      // query is now: 'bar=baz'

  @function up.params.fromURL
  @param {string} url
    The URL from which to extract the query string.
  @return {string|undefined}
    The given URL's query string, or `undefined` if the URL has no query component.
  @experimental
  ###
  @fromURL: (url) ->
    params = new @()
    urlParts = u.parseUrl(url)
    if query = urlParts.search
      query = query.replace(/^\?/, '')
      params.addAll(query)
    params

  ###**
  TODO: Document me
  ###
  @wrap: (value) ->
    u.wrapValue(value, @)
