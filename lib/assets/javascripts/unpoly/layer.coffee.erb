up.layer = do ->

  DEFAULT_FLAVOR_IMPLEMENTATIONS = [
    up.Layer.Root
    up.Layer.Modal
    up.Layer.Popup
    up.Layer.Drawer
    up.Layer.Cover
  ]

  config = new up.Config ->
    newConfig =
      flavor: 'modal'
      targets: ['[up-layer-target]']
      all: up.layer.Base.config

    for implementation in DEFAULT_FLAVOR_IMPLEMENTATIONS
      registerFlavor(implementation, newConfig)

    return newConfig

  stack = new up.LayerStack(-> layers: [new up.layers.Root()])

  registerFlavor = (Implementation, store = config) ->
    name = Implementation.flavor
    # Since the layer class names are not public API, we make their static
    # config property accessible through up.layer.config. E.g. up.layer.config.dialog
    # is set to up.layer.Dialog.config.
    subConfig = Implementation.config
    subConfig.Implementation = Implementation
    store[name] = subConfig

  defaultTargets = (options = {}) ->
    flavorImplementation(options).defaults().targets

  flavorImplementation = (options = {}) ->
    flavor = options.flavor ? config.flavor
    config[flavor].Implementation or up.fail("Unknown layer flavor: #{flavor}")

  closeHandlerAttr = (link, attr) ->
    if code = link.getAttribute(attr)
      return new Function('value', code).bind(link)

  reset = ->
    config.reset(deep: true)
    stack.reset()

  open = (options) ->
    options = u.options(options, layer: 'new')

    # Even if we are given { content} we need to pipe this through up.change()
    # since a lot of options processing is happening there.
    up.change(options)

  build = (options) ->
    flavor = options.flavor ? config.flavor
    Implementation = config[flavor].implementation
    return new Implementation(stack, options)

  prompt = (options) ->
    return new Promise (onConfirm, onDismiss) ->
      options = u.merge(options, { onConfirm, onDismiss, })
      open(options)

  currentLayer = ->
    stack.current()

  forElement = (element) ->
    element = e.get(element)

    for layer in stack.all() by -1
      if layer.contains(element)
        return element

  lookupOne = (options) ->
    lookupAll(options)[0]

  lookupAll = (options) ->
    value = options.value

    unless value
      return [stack.root()]

    if value instanceof up.Layer
      return [value]

    if u.isElement(value) || u.isJQuery(value)
      return [forElement(value)]

    givenOriginLayer = ->
      if origin = options.origin
        forElement(origin)
      else
        up.fail('Updating layer %s requires { origin } option', value)

    return switch value
      when 'root'
        [stack.root()]
      when 'page'
        up.legacy.warn('Layer "page" has been renamed to "root"')
        [stack.root()]
      when 'current'
        [currentLayer()]
      when 'any'
        u.reverse(stack.all())
      when 'origin'
        [givenOriginLayer()]
      when 'parent'
        [stack.parent(givenOriginLayer())]
      when 'ancestors'
        stack.ancestors(givenOriginLayer())
      when 'closest'
        stack.selfAndAncestors(givenOriginLayer())

  allElements = (selector, options) ->
    layers = lookupAll(options)
    u.flatMap layers, (layer) -> layer.allElements(selector)

  firstElement = (selector, options) ->
    layers = lookupAll(options)
    u.findResult layers, -> layer.firstElement(selector)

  up.event.onEscape (event) ->
    if currentLayer().dismissable
      u.muteRejection dismiss()
      up.event.halt(event)

  # TODO: Docs for [up-modal]
  # TODO: Docs for [up-popup]
  # TODO: Docs for [up-drawer]
  # TODO: Docs for [up-cover]
  for implementation in DEFAULT_FLAVOR_IMPLEMENTATIONS
    if attr = implementation.attr
      up.link.targetMacro attr,
        'up-layer': 'new'
        'up-flavor': implementation.flavor

  # The framework is reset between tests, so also close a currently open tooltip.
  up.on 'up:framework:reset', reset

  root: -> stack.root()
  current: currentLayer
  forElement: forElement
  all: -> stack.all()
  parent: -> stack.parent()
  ancestors: -> stack.ancestors()
  selfAndAncestors: -> stack.selfAndAncestors()
  lookup: lookupOne
  lookupAll: lookupAll
  allElements: allElements
  firstElement: firstElement
  config: config
  defaultTargets: defaultTargets
  open: open
  container: -> stack.container()
  build: build
