#= require ./classes/selector

up.element = do ->

  u = up.util

  NONE = { getAttribute: -> undefined }

  s = (selector) ->
    up.Selector.parse(selector)

  descendant = (root, selector) ->
    s(selector).descendant(root)

  descendants = (root, selector) ->
    s(selector).descendants(root)

  first = (selector) ->
    s(selector).first()

  all = (selector) ->
    s(selector).all()

  subtree = (root, selector) ->
    s(selector).subtree(root)

  closest = (element, selector) ->
    # assertIsElement(element)
    s(selector).closest(element)

  matches = (element, selector) ->
    s(selector).matches(element)

  ancestor = (element, selector) ->
    s(selector).ancestor(element)

  ###**
  If given a jQuery collection, returns the first native DOM element in the collection.
  If given a string, returns the first element matching that string.
  If given any other argument, returns the argument unchanged.

  @function up.element.get
  @param {jQuery|Element|String} object
  @return {Element}
  @internal
  ###
  getOne = (object) ->
    if u.isJQuery(object)
      if object.length > 1
        up.fail('up.element.get(): Cannot cast a multi-element jQuery collection to a single elenent')
      object[0]
    else if u.isString(object)
      first(object)
    else
      object

  ###**
  If given a string, returns the all elements matching that string.
  If given any other argument, returns the argument [wrapped as a collection](/up.util.wrapCollection).

  @function up.element.elements
  @param {jQuery|Element|String} object
  @return {Element}
  @internal
  ###
  getList = (args...) ->
    u.flatMap args, valueToList

  valueToList = (value) ->
    if u.isString(value)
      all(value)
    else
      u.wrapList(value)

  triggerCustom = (element, name, props = {}) ->
    event = document.createEvent('Event')
    event.initEvent(name, true, true) # name, bubbles, cancelable
    u.assign(event, props)

    # IE11 does not set { defaultPrevented: true } after #preventDefault()
    # was called on a custom event.
    # See discussion here: https://stackoverflow.com/questions/23349191
    if up.browser.isIE11()
      event.preventDefault = ->
        Object.defineProperty(event, 'defaultPrevented', get: -> true)

    element.dispatchEvent(event)

    return event

#  assertIsElement = (element) ->
#    unless u.isElement(element)
#      up.fail('Not an element: %o', element)

  remove = (element) ->
    if element.remove
      element.remove()
    # IE does not support Element#remove()
    else if parent = element.parentNode
      parent.removeChild(element)

  hide = (element) ->
    element.style.display = 'none'

  show = (element) ->
    element.style.display = ''

  toggle = (element, newVisible) ->
    if newVisible
      show(element)
    else
      hide(element)

#  trace = (fn) ->
#    (args...) ->
#      console.debug("Calling %o with %o", fn, args)
#      fn(args...)

  toggleClass = (element, klass, newPresent) ->
    fn = if newPresent then 'add' else 'remove'
    element.classList[fn](klass)

  setAttrs = (element, attrMap) ->
    for key, value of attrMap
      element.setAttribute(key, value)

  metaContent = (name) ->
    selector = "meta" + attributeSelector('name', name)
    first(selector)?.getAttribute('content')

  insertBefore = (existingElement, newElement) ->
    existingElement.insertAdjacentElement('beforebegin', newElement)

#  insertAfter = (existingElement, newElement) ->
#    existingElement.insertAdjacentElement('afterend', newElement)

  replace = (oldElement, newElement) ->
    oldElement.parentElement.replaceChild(newElement, oldElement)

  setAttrs = (element, attrs) ->
    for name, value of attrs
      element.setAttribute(name, value)

  createFromSelector = (givenSelector) ->
    # Extract attribute values before we do anything else.
    # Attribute values might contain spaces, and then we would incorrectly
    # split depths at that space.
    attrValues = []
    selectorWithoutAttrValues = givenSelector.replace /\[([\w-]+)(?:=(["'])?([^"'\]]*?)\2)?\]/g, (_match, attrName, _quote, attrValue) ->
      attrValues.push(attrValue || '')
      "[#{attrName}]"

    depths = selectorWithoutAttrValues.split(/[ >]+/)
    rootElement = undefined
    depthElement = undefined
    previousElement = undefined

    for depthSelector in depths
      tagName = undefined

      depthSelector = depthSelector.replace /^[\w-]+/, (match) ->
        tagName = match
        ''

      depthElement = document.createElement(tagName || 'div')
      rootElement ||= depthElement

      depthSelector = depthSelector.replace /\#([\w-]+)/, (_match, id) ->
        depthElement.id = id
        ''

      depthSelector = depthSelector.replace /\.([\w-]+)/g, (_match, className) ->
        depthElement.classList.add(className)
        ''

      # If we have stripped out attrValues at the beginning of the function,
      # they have been replaced with the attribute name only (as "[name]").
      if attrValues.length
        depthSelector = depthSelector.replace /\[([\w-]+)\]/g, (_match, attrName) ->
          depthElement.setAttribute(attrName, attrValues.shift())
          ''

      unless depthSelector == ''
        throw new Error('Cannot parse selector: ' + givenSelector)

      previousElement?.appendChild(depthElement)
      previousElement = depthElement

    rootElement

  # createDivWithClass = (className) ->
  #   element = document.createElement('div')
  #   element.className = className
  #   element

  subscribeEvents = (fn, elements, eventNames, callback) ->
    for element in u.wrapList(elements)
      for eventName in u.wrapList(eventNames)
        element[fn](eventName, callback)

  bind = u.partial(subscribeEvents, 'addEventListener')

  unbind = u.partial(subscribeEvents, 'removeEventListener')

  affix = (container, selector, attrs) ->
    element = createFromSelector(selector)
    if attrs
      if classValue = u.pluckKey(attrs, 'class')
        for klass in u.wrapList(classValue)
          element.classList.add(klass)
      if styleValue = u.pluckKey(attrs, 'style')
        writeInlineStyle(element, styleValue)
      if textValue = u.pluckKey(attrs, 'text')
        element.innerText = textValue
      setAttrs(element, attrs)
    container.appendChild(element)
    element

  ###**
  Returns a CSS selector that matches the given element as good as possible.

  This uses, in decreasing order of priority:

  - The element's `up-id` attribute
  - The element's ID
  - The element's name
  - The element's classes
  - The element's tag names

  @function up.element.toSelector
  @param {string|Element|jQuery}
    The element for which to create a selector.
  @experimental
  ###
  toSelector = (element) ->
    return element if u.isString(element)

    # resolveSelector() might be called with jQuery collections
    element = getOne(element)

    selector = undefined

    if isSingleton(element)
      selector = elementTagName(element)
    else if upId = element.getAttribute("up-id")
      selector = attributeSelector('up-id', upId)
    else if id = element.getAttribute("id")
      if id.match(/^[a-z0-9\-_]+$/i)
        selector = "##{id}"
      else
        selector = attributeSelector('id', id)
    else if name = element.getAttribute("name")
      selector = elementTagName(element) + attributeSelector('name', name)
    else if classes = u.presence(nonUpClasses(element))
      selector = ''
      for klass in classes
        selector += ".#{klass}"
    else if ariaLabel = element.getAttribute("aria-label")
      selector = attributeSelector('aria-label', ariaLabel)
    else
      selector = elementTagName(element)

    return selector

  isSingleton = (element) ->
    matches(element, 'html, body, head, title')

  elementTagName = (element) ->
    element.tagName.toLowerCase()

  attributeSelector = (attribute, value) ->
    value = value.replace(/"/g, '\\"')
    "[#{attribute}=\"#{value}\"]"

  nonUpClasses = (element) ->
    classString = element.className
    classes = u.splitValues(classString)
    u.reject classes, (klass) -> klass.match(/^up-/)

  createDocumentFromHtml = (html) ->
    # IE9 cannot set innerHTML on a <html> or <head> element.
    parser = new DOMParser()
    return parser.parseFromString(html, 'text/html')

  createFragmentFromHtml = (html) ->
    doc = createDocumentFromHtml(html)
    return doc.body.children[0]

  getRoot = ->
    document.documentElement

  ###**
  Forces a paint of the given element.

  @function up.element.paint
  @internal
  ###
  paint = (element) ->
    element.offsetHeight

  ###**
  @function up.element.concludeCssTransition
  @internal
  ###
  concludeCssTransition = (element) ->
    undo = writeTemporaryStyle(element, transition: 'none')
    # Browsers need to paint at least one frame without a transition to stop the
    # animation. In theory we could just wait until the next paint, but in case
    # someone will set another transition after us, let's force a repaint here.
    paint(element)
    return undo

  ###**
  Returns whether the given element has a CSS transition set.

  @function up.util.hasCssTransition
  @return {boolean}
  @internal
  ###
  hasCssTransition = (elementOrStyleHash) ->
    if u.isOptions(elementOrStyleHash)
      style = elementOrStyleHash
    else
      style = u.getComputedStyle(elementOrStyleHash)

    prop = style.transitionProperty
    duration = style.transitionDuration
    # The default transition for elements is actually "all 0s ease 0s"
    # instead of "none", although that has the same effect as "none".
    noTransition = (prop == 'none' || (prop == 'all' && duration == 0))
    not noTransition

  ###**
  @function up.util.fixedToAbsolute
  @internal
  ###
  fixedToAbsolute = (element) ->
    elementRectAsFixed = element.getBoundingClientRect()

    # Set the position to 'absolute' so it gains an offsetParent
    element.style.position = 'absolute'

    offsetParentRect = element.offsetParent.getBoundingClientRect()

    writeInlineStyle element,
      left: elementRectAsFixed.left - readComputedStyleNumber(element, 'margin-left') - offsetParentRect.left
      top: elementRectAsFixed.top - readComputedStyleNumber(element, 'margin-top') - offsetParentRect.top
      right: ''
      bottom: ''

  ###**
  On the given element, set attributes that are still missing.

  @function up.element.setMissingAttrs
  @internal
  ###
  setMissingAttrs = (element, attrs) ->
    for key, value of attrs
      if u.isMissing(element.getAttribute(key))
        element.setAttribute(key, value)

  ###**
  @function up.element.unwrapElement
  @internal
  ###
  unwrapElement = (wrapper) ->
    parent = wrapper.parentNode;
    wrappedNodes = u.toArray(wrapper.childNodes)
    u.each wrappedNodes, (wrappedNode) ->
      parent.insertBefore(wrappedNode, wrapper)
    parent.removeChild(wrapper)

  ###**
  Returns the value for the given element and attribute, if it is present.

  If it is blank it returns `undefined`.

  @function up.util.presentAttr
  @internal
  ###
  presentAttr = (element, attribute) ->
    value = element.getAttribute(attribute)
    u.presence(value)

  ###**
  @function up.util.castedAttr
  @internal
  ###
  castedAttr = (element, attribute) ->
    value = element.getAttribute(attribute)
    switch value
      when 'false' then false
      when 'true', '', attribute then true
      else value # other strings, undefined, null, ...

  ###**
  @function up.util.numberAttr
  @internal
  ###
  numberAttr = (element, attribute) ->
    value = element.getAttribute(attribute)
    if value?.match(/^[\d\.]+$/)
      parseFloat(value)

  ###**
  Reads the given attribute from the element, parsed JSON.

  Returns `undefined` if the attribute value is [blank](/up.util.isBlank).

  @function up.element.jsonAttr
  @internal
  ###
  jsonAttr = (element, attribute) ->
    # The document does not respond to #getAttribute()
    if json = element.getAttribute?(attribute)?.trim()
      JSON.parse(json)

  ###**
  Temporarily sets the CSS for the given element.

  @function up.util.writeTemporaryStyle
  @param {jQuery} $element
  @param {Object} css
  @param {Function} [block]
    If given, the CSS is set, the block is called and
    the old CSS is restored.
  @return {Function}
    A function that restores the original CSS when called.
  @internal
  ###
  writeTemporaryStyle = (element, newCss, block) ->
    oldStyles = readInlineStyle(element, Object.keys(newCss))
    restoreOldStyles = -> writeInlineStyle(element, oldStyles)
    writeInlineStyle(element, newCss)
    if block
      # If a block was passed, we run the block and restore old styles.
      block()
      restoreOldStyles()
    else
      # If no block was passed, we return the restoration function.
      restoreOldStyles

  ###**
  Gets the computed style(s) for the given element.

  @function up.element.readComputedStyle
  @param {jQuery|Element} element
  @param {String|Array} propOrProps
    One or more CSS property names in camelCase.
  @return {string|object}
  @internal
  ###
  readComputedStyle = (element, props) ->
    element = up.element.get(element)
    style = window.getComputedStyle(element)
    extractFromStyleObject(style, props)

  ###**
  Gets a computed style value for the given element.
  If a value is set, the value is parsed to a number before returning.

  @function up.element.readComputedStyleNumber
  @param {jQuery|Element} element
  @param {String} prop
    A CSS property name in camelCase.
  @return {string|object}
  @internal
  ###
  readComputedStyleNumber = (element, prop) ->
    rawValue = readComputedStyle(element, prop)
    if u.isGiven(rawValue)
      parseFloat(rawValue)
    else
      undefined

  ###**
  Gets the given inline style(s) from the given element's `[style]` attribute.

  @function up.element.readInlineStyle
  @param {jQuery|Element} element
  @param {String|Array} propOrProps
    One or more CSS property names in camelCase.
  @return {string|object}
  @internal
  ###
  readInlineStyle = (element, props) ->
    element = up.element.get(element)
    style = element.style
    extractFromStyleObject(style, props)

  extractFromStyleObject = (style, keyOrKeys) ->
    if u.isString(keyOrKeys)
      style[keyOrKeys]
    else # array
      u.only(style, keyOrKeys...)

  ###**
  Merges the given inline style(s) into the given element's `[style]` attribute.

  @function up.element.readInlineStyle
  @param {jQuery|Element} element
  @param {Object} props
    One or more CSS properties with camelCase keys.
  @return {string|object}
  @internal
  ###
  writeInlineStyle = (element, props) ->
    element = up.element.get(element)
    style = element.style
    for key, value of props
      value = normalizeStyleValueForWrite(key, value)
      style[key] = value

  normalizeStyleValueForWrite = (key, value) ->
    if u.isMissing(value)
      value = ''
    else if CSS_LENGTH_PROPS.has(key)
      value = cssLength(value)
    value

  CSS_LENGTH_PROPS = u.arrayToSet [
    'top', 'right', 'bottom', 'left',
    'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft',
    'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft',
    'width', 'height',
    'maxWidth', 'maxHeight',
    'minWidth', 'minHeight',
  ]

  ###**
  Converts the given value to a CSS length value, adding a `px` unit if required.

  @function up.util.cssLength
  @internal
  ###
  cssLength = (obj) ->
    if u.isNumber(obj) || (u.isString(obj) && /^\d+$/.test(obj))
      obj.toString() + "px"
    else
      obj

  ###**
  Resolves the given CSS selector (which might contain `&` references)
  to a full CSS selector without ampersands.

  If passed an `Element` or `jQuery` element, returns a CSS selector string
  for that element.

  @function up.element.resolveSelector
  @param {string|Element|jQuery} selectorOrElement
  @param {string|Element|jQuery} origin
    The element that this selector resolution is relative to.
    That element's selector will be substituted for `&` ([like in Sass](https://sass-lang.com/documentation/file.SASS_REFERENCE.html#parent-selector)).
  @return {string}
  @internal
  ###
  resolveSelector = (selectorOrElement, origin) ->
    if u.isString(selectorOrElement)
      selector = selectorOrElement
      if u.contains(selector, '&')
        if u.isPresent(origin) # isPresent returns false for empty jQuery collection
          originSelector = toSelector(origin)
          selector = selector.replace(/\&/, originSelector)
        else
          up.fail("Found origin reference (%s) in selector %s, but no origin was given", '&', selector)
    else
      selector = toSelector(selectorOrElement)
    selector

  <% if ENV['JS_KNIFE'] %>knife: eval(Knife.point)<% end %>
  descendant: descendant
  descendants: descendants
  first: first
  all: all
  subtree: subtree
  closest: closest
  matches: matches
  ancestor: ancestor
  get: getOne
  list: getList
  triggerCustom: triggerCustom
  remove: remove
  toggle: toggle
  toggleClass: toggleClass
  hide: hide
  show: show
  setAttrs: setAttrs
  metaContent: metaContent
  replace: replace
  insertBefore: insertBefore
  # insertAfter: insertAfter
  createFromSelector: createFromSelector
  setAttrs: setAttrs
  affix: affix
  on: bind
  off: unbind
  toSelector: toSelector
  isSingleton: isSingleton
  attributeSelector: attributeSelector
  createDocumentFromHtml: createDocumentFromHtml
  createFragmentFromHtml: createFragmentFromHtml
  root: getRoot
  paint: paint
  concludeCssTransition: concludeCssTransition
  hasCssTransition: hasCssTransition
  fixedToAbsolute: fixedToAbsolute
  setMissingAttrs: setMissingAttrs
  unwrapElement: unwrapElement
  presentAttr: presentAttr
  castedAttr: castedAttr
  numberAttr: numberAttr
  jsonAttr: jsonAttr
  writeTemporaryStyle: writeTemporaryStyle
  readComputedStyle: readComputedStyle
  readComputedStyleNumber: readComputedStyleNumber
  readInlineStyle: readInlineStyle
  writeInlineStyle: writeInlineStyle
  resolveSelector: resolveSelector
  none: -> NONE

  # createDivWithClass: createDivWithClass
