###**
Events
======

Most Unpoly interactions emit DOM events that are prefixed with `up:`.

    $(document).on('up:modal:opened', function(event) {
      console.log('A new modal has just opened!');
    });

Events often have both present ([`up:modal:open`](/up:modal:open))
and past forms ([`up:modal:opened`](/up:modal:opened)).


\#\#\# Preventing events

You can prevent most present form events by calling `preventDefault()`:

    $(document).on('up:modal:open', function(event) {
      if (event.url == '/evil') {
        // Prevent the modal from opening
        event.preventDefault();
      }
    });


\#\#\# A better way to bind event listeners

Instead of using jQuery to bind  an event handler to `document`, you can also
use the more convenient [`up.on()`](/up.on):

    up.on('click', 'button', function(event, $button) {
      // $button is a jQuery collection containing
      // the clicked <button> element
    });

This improves jQuery's [`on`](http://api.jquery.com/on/) in multiple ways:

- Event listeners on [unsupported browsers](/up.browser.isSupported) are silently discarded,
  leaving you with an application without JavaScript. This is typically preferable to
  a soup of randomly broken JavaScript in ancient browsers.
- A jQuery object with the target element is automatically passed to the event handler
  as a second argument. You no longer need to write `$(this)` in the handler function.
- You use an [`up-data`](/up-data) attribute to [attach structured data](/up.on#attaching-structured-data)
  to observed elements.

@class up.event
###
up.event = do ->
  
  u = up.util
  e = up.element

  reset = ->
    # Resets the list of registered event listeners to the
    # moment when the framework was booted.
    for element in [window, document, document.documentElement, document.body]
      up.EventListener.unbindNonDefault(element)

  ###**
  Listens to an event on `document` or a given element.

  The given event listener which will be executed whenever the
  given event is [triggered](/up.emit) on the given selector:

      up.on('click', '.button', function(event, $element) {
        console.log("Someone clicked the button %o", $element);
      });

  This is roughly equivalent to binding an event listener to `document`:

      $(document).on('click', '.button', function(event) {
        console.log("Someone clicked the button %o", $(this));
      });

  Other than jQuery, Unpoly will silently discard event listeners
  on [unsupported browsers](/up.browser.isSupported).

  \#\#\# Attaching structured data

  In case you want to attach structured data to the event you're observing,
  you can serialize the data to JSON and put it into an `[up-data]` attribute:

      <span class='person' up-data='{ "age": 18, "name": "Bob" }'>Bob</span>
      <span class='person' up-data='{ "age": 22, "name": "Jim" }'>Jim</span>

  The JSON will parsed and handed to your event handler as a third argument:

      up.on('click', '.person', function(event, $element, data) {
        console.log("This is %o who is %o years old", data.name, data.age);
      });

  \#\#\# Unbinding an event listener

  `up.on()` returns a function that unbinds the event listeners when called:

      // Define the listener
      var listener =  function() { ... };

      // Binding the listener returns an unbind function
      unbind = up.on('click', listener);

      // Unbind the listener
      unbind()

  There is also a function [`up.off()`](/up.off) which you can use for the same purpose:

      // Define the listener
      var listener =  function() { ... };

      // Bind the listener
      up.on('click', listener);

      // Unbind the listener
      up.off('click', listener)

  \#\#\# Migrating jQuery event handlers to `up.on()`

  Within the event handler, Unpoly will bind `this` to the
  native DOM element to help you migrate your existing jQuery code to
  this new syntax.

  So if you had this before:

      $(document).on('click', '.button', function() {
        $(this).something();
      });

  ... you can simply copy the event handler to `up.on()`:

      up.on('click', '.button', function() {
        $(this).something();
      });

  @function up.on
  @param {Element|jQuery} [element=document]
    The element on which to register the event listener.

    If no element is given, the listener is registered on the `document`.
  @param {string} events
    A space-separated list of event names to bind to.
  @param {string} [selector]
    The selector of an element on which the event must be triggered.
    Omit the selector to listen to all events with that name, regardless
    of the event target.
  @param {Function(event, [element], [data])} listener
    The listener function that should be called.

    The function takes the affected element as the first argument).
    If the element has an [`up-data`](/up-data) attribute, its value is parsed as JSON
    and passed as a second argument.
  @return {Function}
    A function that unbinds the event listeners when called.
  @stable
  ###
  bind = (args...) ->
    bindNow(args)

  ###**
  TODO: Document me

  @function up.$on
  @stable
  ###
  $bind = (args...) ->
    bindNow(args, jQuery: true)

  bindNow = (args, options) ->
    # Silently discard any event handlers that are registered on unsupported
    # browsers and return a no-op destructor
    return (->) unless up.browser.isSupported()

    listener = up.EventListener.fromBindArgs(args, options)
    listener.bind()

    return listener.unbind

  ###**
  Unbinds an event listener previously bound with [`up.on()`](/up.on).

  \#\#\# Example

  Let's say you are listing to clicks on `.button` elements:

      var listener = function() { ... };
      up.on('click', '.button', listener);

  You can stop listening to these events like this:

      up.off('click', '.button', listener);

  Note that you need to pass `up.off()` a reference to the same listener function
  that was passed to `up.on()` earlier.

  @function up.off
  @stable
  ###
  unbind = (args...) ->
    if listener = up.EventListener.fromUnbindArgs(args)
      listener.unbind()

  ###**
  Emits a event with the given name and properties.

  The event will be triggered as a jQuery event on `document`.

  Other code can subscribe to events with that name using
  [`up.on()`](/up.on) or by [binding a jQuery event listener](http://api.jquery.com/on/) to `document`.

  \#\#\# Example

      up.on('my:event', function(event) {
        console.log(event.foo);
      });

      up.emit('my:event', { foo: 'bar' });
      # Prints "bar" to the console

  @function up.emit
  @param {string} eventName
    The name of the event.
  @param {Object} [eventProps={}]
    A list of properties to become part of the event object
    that will be passed to listeners. Note that the event object
    will by default include properties like `preventDefault()`
    or `stopPropagation()`.
  @param {jQuery} [eventProps.$element=$(document)]
    The element on which the event is triggered.
  @param {string|Array} [eventProps.log=false]
    A message to print to the console when the event is emitted.
  @experimental
  ###
  emit = (eventName, eventProps = {}) ->
    # Three cases:
    # - Event is triggered on document (default)
    # - Event is triggered on { $element }
    # - Event is triggered on { $target }, but should have an { $element } property
    target = u.pluckKey(eventProps, 'target') ? document
    logEmission(eventName, eventProps)
    e.emit(target, eventName, eventProps)

  logEmission = (eventName, eventProps) ->
    return unless up.log.isEnabled()

    message = u.pluckKey(eventProps, 'log')

    if u.isArray(message)
      [message, messageArgs...] = message
    else
      messageArgs = []

    if u.isString(message)
      if u.isPresent(eventProps)
        up.puts "#{message} (%s (%o))", messageArgs..., eventName, eventProps
      else
        up.puts "#{message} (%s)", messageArgs..., eventName
    else if message == true
      if u.isPresent(eventProps)
        up.puts 'Event %s (%o)', eventName, eventProps
      else
        up.puts 'Event %s', eventName

  ###**
  [Emits an event](/up.emit) and returns whether no listener
  has prevented the default action.

  @function up.event.nobodyPrevents
  @param {string} eventName
  @param {Object} eventProps
  @param {string|Array} [eventProps.message]
  @return {boolean}
    whether no listener has prevented the default action
  @experimental
  ###
  nobodyPrevents = (args...) ->
    event = emit(args...)
    not event.defaultPrevented

  ###**
  [Emits](/up.emit) the given event and returns a promise
  that will be fulfilled if no listener has prevented the default action.

  If any listener prevented the default listener
  the returned promise will never be resolved.

  @function up.event.whenEmitted
  @param {string} eventName
  @param {Object} eventProps
  @param {string|Array} [eventProps.message]
  @return {Promise}
  @internal
  ###
  whenEmitted = (args...) ->
    new Promise (resolve, reject) ->
      if nobodyPrevents(args...)
        resolve()
      else
        reject(new Error("Event #{args[0]} was prevented"))

  ###**
  Registers an event listener to be called when the user
  presses the `Escape` key.

  @function up.event.onEscape
  @param {Function} listener
    The listener function to register.
  @return {Function}
    A function that unbinds the event listeners when called.
  @experimental
  ###
  onEscape = (listener) ->
    bind('keydown', 'body', (event) ->
      if u.escapePressed(event)
        listener(event)
    )

  ###**
  Stops the given event from propagating and prevents the default action.

  @function up.event.halt
  @internal
  ###
  halt = (event) ->
    event.stopImmediatePropagation()
    event.stopPropagation()
    event.preventDefault()

  ###**
  @function up.event.consumeAction
  @internal
  ###
  consumeAction = (event) ->
    # Halt the event chain to stop duplicate processing of this user interaction.
    halt(event)
    unless event.type == 'up:action:consumed'
      # Although we have consumed this action and halted the event chain,
      # other components might still need to react. E.g. a popup needs to close when
      # an outside link consumes the user click. So we emit another event for that.
      emit('up:action:consumed', target: event.target, log: false)

  bind 'up:framework:reset', reset

  <% if ENV['JS_KNIFE'] %>knife: eval(Knife.point)<% end %>
  on: bind # can't name symbols `on` in Coffeescript
  $on: $bind
  off: unbind # can't name symbols `off` in Coffeescript
  emit: emit
  nobodyPrevents: nobodyPrevents
  whenEmitted: whenEmitted
  onEscape: onEscape
  halt: halt
  consumeAction: consumeAction

up.on = up.event.on
up.$on = up.event.$on
up.off = up.event.off
up.$off = up.event.off # it's the same as up.off()
up.emit = up.event.emit

up.legacy.renamedModule 'bus', 'event'

